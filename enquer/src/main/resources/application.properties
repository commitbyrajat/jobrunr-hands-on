# Spring Boot profile
spring.profiles.active=${SPRING_PROFILES_ACTIVE:prod}

# Database configuration
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres:5432/job-engine}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.hikari.maximum-pool-size=${DB_MAX_POOL_SIZE:10}
spring.datasource.hikari.minimum-idle=${DB_MIN_IDLE:5}
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.max-lifetime=1800000

# JPA / Hibernate
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.default_batch_fetch_size=100
spring.jpa.hibernate.ddl-auto=update

# DevTools
spring.devtools.add-properties=false
spring.devtools.restart.enabled=false

# Server configuration
server.port=${SERVER_PORT:8080}
server.tomcat.max-threads=${SERVER_MAX_THREADS:200}
server.tomcat.min-spare-threads=${SERVER_MIN_THREADS:20}
server.tomcat.max-connections=10000
server.tomcat.accept-count=100
server.tomcat.connection-timeout=20000
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain
server.compression.min-response-size=2048

# Management endpoints
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true

# Logging
logging.level.root=${LOG_LEVEL_ROOT:INFO}
logging.level.org.springframework=${LOG_LEVEL_SPRING:WARN}
logging.level.org.hibernate=${LOG_LEVEL_HIBERNATE:WARN}
logging.level.com.example.app=${LOG_LEVEL_APP:INFO}
logging.file.name=/app/logs/application.log
logging.file.max-size=100MB
logging.file.max-history=30
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%X{correlationId}] [%thread] %-5level %logger{36} - %msg%n

# Application-specific configuration
app.version=${APP_VERSION:1.0}
app.environment=${APP_ENV:production}
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:*}
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=Authorization,Content-Type,X-Requested-With



springdoc.swagger-ui.path=/swagger-ui.html

# application.properties for ENQUEUER service

# ===================================================================
# Enqueuer-specific JobRunr Configuration
# ===================================================================

# Core Settings - Only enable job creation functionality
org.jobrunr.job-scheduler.enabled=true
org.jobrunr.background-job-server.enabled=false
org.jobrunr.dashboard.enabled=false

# Database Storage Configuration
org.jobrunr.database.skip-create=false
org.jobrunr.database.table-prefix=jobrunr_

# Job Creation Settings
org.jobrunr.jobs.default-number-of-retries=3
org.jobrunr.jobs.retry-back-off-time-seed=15
org.jobrunr.jobs.schedule-in-seconds=5

# Optimized for high throughput job creation
org.jobrunr.batch-job-size=100
org.jobrunr.batch-size=100
org.jobrunr.scheduled-jobs-request-size=1000

# Job queue settings
org.jobrunr.jobs.metrics.enabled=true
org.jobrunr.storage.metrics.enabled=true

# Miscellaneous
org.jobrunr.miscellaneous.allow-anonymous-data-usage=false

# Logging level for JobRunr in Enqueuer (can be adjusted)
logging.level.org.jobrunr=INFO